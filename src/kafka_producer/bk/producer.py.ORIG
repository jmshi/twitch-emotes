#!/usr/bin/python
from __future__ import print_function
from chat.chat import TwitchChatStream
import argparse
import time
import numpy as np
from kafka import KafkaProducer, KafkaClient
#from kafka import SimpleProducer as KafkaProducer, KafkaClient
import sys
import random
import datetime

class Producer(object):

    def __init__(self, addr):
        #cluster = KafkaClient(addr)
        #self.producer = KafkaProducer(cluster,async=False)
        self.producer = KafkaProducer(bootstrap_servers=addr)

    def produce_msgs(self, source_symbol):
        price_field = random.randint(800,1400)
        msg_cnt = 0
        while True:
            time_field = datetime.datetime.now().strftime("%Y%m%d %H%M%S")
            price_field += random.randint(-10, 10)/10.0
            volume_field = random.randint(1, 1000)
            str_fmt = "{};{};{};{}"
            message_info = str_fmt.format(source_symbol,
                                          time_field,
                                          price_field,
                                          volume_field)
            print(message_info)
            self.producer.send('my_topic', message_info)
            #self.producer.send_messages('my_topic', message_info)
            msg_cnt += 1

if __name__ == "__main__":
    args = sys.argv
    ip_addr = str(args[1])
    partition_key = str(args[2])
    prod = Producer(ip_addr)
    prod.produce_msgs(partition_key) 

#if __name__ == "__main__":
#
#    parser = argparse.ArgumentParser(description=__doc__)
#    required = parser.add_argument_group('required arguments')
#    required.add_argument('-u', '--username',
#                          help='twitch username',
#                          required=True)
#    required.add_argument('-o', '--oauth',
#                          help='twitch oauth '
#                               '(visit https://twitchapps.com/tmi/ '
#                               'to create one for your account)',
#                          required=True)
#    args = parser.parse_args()
#
#    # Launch a verbose (!) twitch stream
#    with TwitchChatStream(username=args.username,
#                          oauth=args.oauth,
#                          verbose=True) as chatstream:
#
#        # Send a message to this twitch stream
#        chatstream.send_chat_message("I'm reading this!")
#
#        # Continuously check if messages are received (every ~10s)
#        # This is necessary, if not, the chat stream will close itself
#        # after a couple of minutes (due to ping messages from twitch)
#        while True:
#            #received = chatstream.twitch_receive_messages()
#            chatstream.twitch_receive_messages()
#            #if received:
#            #    print("received:", received)
#            #time.sleep(1)
